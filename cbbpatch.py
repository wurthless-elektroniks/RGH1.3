'''
RGH1.3 CB_B patches
'''

from patcher import *

HWINIT_POSTCOUNT_BLOCK_BASE_ADDRESS = 0x280

def assemble_hwinit_postcount_block_universal(cbb_image: bytes,
                                              address: int,
                                              hwinit_register_setup_fcn_address: int,
                                              hwinit_interpreter_top_address: int,
                                              hwinit_done_address: int):
    hwinit_postcount_block_new = bytes([
        0x48, 0x00, 0x00, 0x18, 0x48, 0x00, 0x00, 0x44, 0x48, 0x00, 0x00, 0x60, 0x48, 0x00, 0x00, 0x00, 
        0x48, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x7c, 0xcc, 0x42, 0xa6, 0x74, 0xc6, 0x01, 
        0x00, 0xf8, 0xc1, 0xff, 0x58, 0x3c, 0xa0, 0x80, 0x00, 0x60, 0xa5, 0x02, 0x00, 0x78, 0xa5, 
        0x07, 0xc6, 0x64, 0xa5, 0x00, 0x06, 0x38, 0xe0, 0x00, 0xa2, 0x78, 0xe7, 0xc1, 0xc6, 0xf8, 
        0xe5, 0x10, 0x10, 0x4b, 0xff, 0xff, 0xcd, 0x4b, 0xff, 0xff, 0xcc, 0x1c, 0xc6, 0x00, 0x32, 
        0x7d, 0x0c, 0x42, 0xa6, 0x7d, 0x08, 0x32, 0x14, 0x7c, 0xec, 0x42, 0xa6, 0x7c, 0x27, 0x40, 
        0x40, 0x41, 0x81, 0xff, 0xb4, 0x48, 0x00, 0x00, 0x2d, 0x4b, 0xff, 0xff, 0xf0, 0x3c, 0xa0, 
        0x80, 0x00, 0x60, 0xa5, 0x02, 0x00, 0x78, 0xa5, 0x07, 0xc6, 0x64, 0xa5, 0x00, 0x06, 0x38, 
        0xe0, 0x00, 0x2e, 0x78, 0xe7, 0xc1, 0xc6, 0xf8, 0xe5, 0x10, 0x10, 0x38, 0xa0, 0x00, 0x01, 
        0x4b, 0xff, 0xff, 0x8c, 0xf8, 0xa1, 0xff, 0x50, 0xf8, 0xc1, 0xff, 0x48, 0xf8, 0xe1, 0xff, 
        0x40, 0xf9, 0x01, 0xff, 0x38, 0xe8, 0xc1, 0xff, 0x58, 0x7c, 0xac, 0x42, 0xa6, 0x74, 0xa7, 
        0x01, 0x00, 0x7c, 0x26, 0x38, 0x40, 0x41, 0x82, 0x00, 0x30, 0xf8, 0xe1, 0xff, 0x58, 0x3c, 
        0xa0, 0x80, 0x00, 0x60, 0xa5, 0x02, 0x00, 0x78, 0xa5, 0x07, 0xc6, 0x64, 0xa5, 0x00, 0x06, 
        0x38, 0xe0, 0x00, 0xa2, 0x2c, 0x06, 0x00, 0x00, 0x41, 0x82, 0x00, 0x08, 0x60, 0xe7, 0x00, 
        0x40, 0x78, 0xe7, 0xc1, 0xc6, 0xf8, 0xe5, 0x10, 0x10, 0xe8, 0xa1, 0xff, 0x50, 0xe8, 0xc1, 
        0xff, 0x48, 0xe8, 0xe1, 0xff, 0x40, 0xe9, 0x01, 0xff, 0x38, 0x4e, 0x80, 0x00, 0x20, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    ])

    hwinit_postcount_block_size = len(hwinit_postcount_block_new)
    if hwinit_postcount_block_size > 256:
        raise RuntimeError("hwinit postcount block too big - must be 256 bytes or less")

    cbb_image[address:address+hwinit_postcount_block_size] = hwinit_postcount_block_new

    cbb_image, _ = assemble_branch(cbb_image, address+0x0C, hwinit_register_setup_fcn_address)
    cbb_image, _ = assemble_branch(cbb_image, address+0x10, hwinit_interpreter_top_address)
    cbb_image, _ = assemble_branch(cbb_image, address+0x14, hwinit_done_address)

    return cbb_image

def assemble_hwinit_smcipc_block_universal(cbb_image: bytes,
                                              address: int,
                                              hwinit_register_setup_fcn_address: int,
                                              hwinit_interpreter_top_address: int,
                                              hwinit_done_address: int):
    hwinit_postcount_block_new = bytes([
        0x48, 0x00, 0x00, 0x18, 0x48, 0x00, 0x00, 0x28, 0x48, 0x00, 0x00, 0x44, 0x48, 0x00, 0x00, 0x00, 
        0x48, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x7c, 0xcc, 0x42, 0xa6, 0x74, 0xc6, 0x01, 0x00, 
        0xf8, 0xc1, 0xff, 0x58, 0x4b, 0xff, 0xff, 0xe9, 0x4b, 0xff, 0xff, 0xe8, 0x1c, 0xc6, 0x00, 0x32, 
        0x7d, 0x0c, 0x42, 0xa6, 0x7d, 0x08, 0x32, 0x14, 0x7c, 0xec, 0x42, 0xa6, 0x7c, 0x27, 0x40, 0x40, 
        0x41, 0x81, 0xff, 0xd0, 0x48, 0x00, 0x00, 0x49, 0x4b, 0xff, 0xff, 0xf0, 0x3c, 0xa0, 0x80, 0x00, 
        0x60, 0xa5, 0x02, 0x00, 0x78, 0xa5, 0x07, 0xc6, 0x64, 0xa5, 0xea, 0x00, 0x3c, 0xc0, 0x04, 0x00, 
        0x80, 0xe5, 0x10, 0x84, 0x7c, 0xe7, 0x30, 0x38, 0x7c, 0x07, 0x30, 0x00, 0x40, 0x82, 0xff, 0xf4, 
        0x90, 0xc5, 0x10, 0x84, 0x3c, 0xc0, 0xa4, 0x00, 0x90, 0xc5, 0x10, 0x80, 0x38, 0xc0, 0x00, 0x00, 
        0x90, 0xc5, 0x10, 0x84, 0x38, 0xa0, 0x00, 0x01, 0x4b, 0xff, 0xff, 0x8c, 0x7c, 0xa3, 0x80, 0x50, 
        0x2c, 0x05, 0x01, 0x6c, 0x41, 0x80, 0x00, 0x5c, 0xe8, 0xc1, 0xff, 0x58, 0x74, 0xe7, 0x01, 0x00, 
        0x7c, 0x26, 0x38, 0x40, 0x41, 0x82, 0x00, 0x4c, 0xf8, 0xe1, 0xff, 0x58, 0x3c, 0xa0, 0x80, 0x00, 
        0x60, 0xa5, 0x02, 0x00, 0x78, 0xa5, 0x07, 0xc6, 0x64, 0xa5, 0xea, 0x00, 0x3c, 0xe0, 0x04, 0x00, 
        0x81, 0x25, 0x10, 0x84, 0x7d, 0x29, 0x38, 0x38, 0x7c, 0x09, 0x38, 0x00, 0x40, 0x82, 0xff, 0xf4, 
        0x90, 0xe5, 0x10, 0x84, 0x3c, 0xe0, 0xa2, 0x00, 0x2c, 0x06, 0x00, 0x00, 0x41, 0x82, 0x00, 0x08, 
        0x3c, 0xe0, 0xe2, 0x00, 0x90, 0xe5, 0x10, 0x80, 0x38, 0xe0, 0x00, 0x00, 0x90, 0xe5, 0x10, 0x84, 
        0x4e, 0x80, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ])

    hwinit_postcount_block_size = len(hwinit_postcount_block_new)
    if hwinit_postcount_block_size > 256:
        raise RuntimeError("hwinit smcipc block too big - must be 256 bytes or less")

    cbb_image[address:address+hwinit_postcount_block_size] = hwinit_postcount_block_new

    cbb_image, _ = assemble_branch(cbb_image, address+0x0C, hwinit_register_setup_fcn_address)
    cbb_image, _ = assemble_branch(cbb_image, address+0x10, hwinit_interpreter_top_address)
    cbb_image, _ = assemble_branch(cbb_image, address+0x14, hwinit_done_address)

    return cbb_image

def _do_patches(cbb_image: bytes,
                hwinit_register_setup_fcn_address: int,
                hwinit_interpreter_top_address: int,
                hwinit_done_address: int,
                hwinit_init_patch_address: int,
                hwinit_delay_patch_address: int,
                hwinit_success_patch_address: int,
                use_smc_ipc: bool = False):
    
    if use_smc_ipc:
        cbb_image = assemble_hwinit_smcipc_block_universal(cbb_image,
                                                            HWINIT_POSTCOUNT_BLOCK_BASE_ADDRESS,
                                                            hwinit_register_setup_fcn_address,
                                                            hwinit_interpreter_top_address,
                                                            hwinit_done_address)
    else:
        cbb_image = assemble_hwinit_postcount_block_universal(cbb_image,
                                                            HWINIT_POSTCOUNT_BLOCK_BASE_ADDRESS,
                                                            hwinit_register_setup_fcn_address,
                                                            hwinit_interpreter_top_address,
                                                            hwinit_done_address)

    cbb_image, _ = assemble_branch(cbb_image, hwinit_init_patch_address, HWINIT_POSTCOUNT_BLOCK_BASE_ADDRESS + 0) # init
    cbb_image, _ = assemble_branch(cbb_image, hwinit_delay_patch_address, HWINIT_POSTCOUNT_BLOCK_BASE_ADDRESS + 4) # delay
    cbb_image, _ = assemble_branch(cbb_image, hwinit_success_patch_address, HWINIT_POSTCOUNT_BLOCK_BASE_ADDRESS + 8) # success

    return cbb_image

def rgh13cbb_do_patches(cbb_image: bytes, use_smc_ipc: bool = False):

    # for 5772, 6752, 9188
    if cbb_image[0x994:0x998] == bytes([0x48, 0x00, 0x03, 0xC9]) and \
        cbb_image[0x9E8:0x9EC] == bytes([0x1C, 0xC6, 0x00, 0x32]) and \
        cbb_image[0xDC4:0xDC8] == bytes([0x38, 0xA0, 0x00, 0x01]):
        
        print("cbbpatch: found 5772/6752/9188")
        return _do_patches(cbb_image,
                           0x0D5C, # register setup
                           0x0998, # interpreter top
                           0x0DD0, # done
                           0x0994, # init patch
                           0x09E8, # delay patch
                           0x0DC4, # success patch
                           use_smc_ipc=use_smc_ipc)
    # for 1940, which has the hwinit code later on
    elif cbb_image[0x3408:0x340C] == bytes([0x48, 0x00, 0x03, 0x85]) and \
       cbb_image[0x345C:0x3460] == bytes([0x1C, 0xC6, 0x00, 0x32]) and \
       cbb_image[0x37EC:0x37F0] == bytes([0x38, 0xA0, 0x00, 0x01]):
        print("cbbpatch: found 1940")
        return _do_patches(cbb_image,
                           0x378C, # register setup
                           0x340C, # interpreter top
                           0x37F8, # done
                           0x3408, # init patch
                           0x345C, # delay patch
                           0x37EC, # success patch
                           use_smc_ipc=use_smc_ipc)

    # 4577 (Zephyr) also has hwinit code late in the binary
    elif cbb_image[0x4BD8:0x4BDC] == bytes([0x48, 0x00, 0x03, 0xB1]) and \
       cbb_image[0x4C2C:0x4C30] == bytes([0x1C, 0xC6, 0x00, 0x32]) and \
       cbb_image[0x4FF0:0x4FF4] == bytes([0x38, 0xA0, 0x00, 0x01]):
        print("cbbpatch: found 4577")
        return _do_patches(cbb_image,
                           0x4F88, # register setup
                           0x4BDC, # interpreter top
                           0x4FFC, # done
                           0x4BD8, # init patch
                           0x4C2C, # delay patch
                           0x4FF0, # success patch
                           use_smc_ipc=use_smc_ipc)
    # 7378 (Elpis)
    elif cbb_image[0x0958:0x95C] == bytes([0x48, 0x00, 0x03, 0xC9]) and \
       cbb_image[0x09AC:0x09B0] == bytes([0x1C, 0xC6, 0x00, 0x32]) and \
       cbb_image[0x0D88:0x0D8C] == bytes([0x38, 0xA0, 0x00, 0x01]):
        print("cbbpatch: found 7378")
        return _do_patches(cbb_image,
                           0x0D20, # register setup
                           0x095C, # interpreter top
                           0x0D94, # done
                           0x0958, # init patch
                           0x09AC, # delay patch
                           0x0D88, # success patch
                           use_smc_ipc=use_smc_ipc)
    else:
        raise RuntimeError("unrecognized CB_B, cannot continue")
