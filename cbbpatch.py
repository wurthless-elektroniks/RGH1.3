'''
RGH1.3 CB_B patches
'''

from patcher import *

HWINIT_POSTCOUNT_BLOCK_BASE_ADDRESS = 0x280

def assemble_hwinit_postcount_block_universal(cbb_image: bytes,
                                              address: int,
                                              hwinit_register_setup_fcn_address: int,
                                              hwinit_interpreter_top_address: int,
                                              hwinit_done_address: int):
    hwinit_postcount_block_new = bytes([
        0x48, 0x00, 0x00, 0x18, 0x48, 0x00, 0x00, 0x44, 0x48, 0x00, 0x00, 0x60, 0x48, 0x00, 0x00, 0x00, 
        0x48, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x7c, 0xcc, 0x42, 0xa6, 0x74, 0xc6, 0x01, 
        0x00, 0xf8, 0xc1, 0xff, 0x58, 0x3c, 0xa0, 0x80, 0x00, 0x60, 0xa5, 0x02, 0x00, 0x78, 0xa5, 
        0x07, 0xc6, 0x64, 0xa5, 0x00, 0x06, 0x38, 0xe0, 0x00, 0xa2, 0x78, 0xe7, 0xc1, 0xc6, 0xf8, 
        0xe5, 0x10, 0x10, 0x4b, 0xff, 0xff, 0xcd, 0x4b, 0xff, 0xff, 0xcc, 0x1c, 0xc6, 0x00, 0x32, 
        0x7d, 0x0c, 0x42, 0xa6, 0x7d, 0x08, 0x32, 0x14, 0x7c, 0xec, 0x42, 0xa6, 0x7c, 0x27, 0x40, 
        0x40, 0x41, 0x81, 0x00, 0x00, 0x48, 0x00, 0x00, 0x2d, 0x4b, 0xff, 0xff, 0xf0, 0x3c, 0xa0, 
        0x80, 0x00, 0x60, 0xa5, 0x02, 0x00, 0x78, 0xa5, 0x07, 0xc6, 0x64, 0xa5, 0x00, 0x06, 0x38, 
        0xe0, 0x00, 0x2e, 0x78, 0xe7, 0xc1, 0xc6, 0xf8, 0xe5, 0x10, 0x10, 0x38, 0xa0, 0x00, 0x01, 
        0x4b, 0xff, 0xff, 0x8c, 0xf8, 0xa1, 0xff, 0x50, 0xf8, 0xc1, 0xff, 0x48, 0xf8, 0xe1, 0xff, 
        0x40, 0xf9, 0x01, 0xff, 0x38, 0xe8, 0xc1, 0xff, 0x58, 0x7c, 0xac, 0x42, 0xa6, 0x74, 0xa7, 
        0x01, 0x00, 0x7c, 0x26, 0x38, 0x40, 0x41, 0x82, 0x00, 0x30, 0xf8, 0xe1, 0xff, 0x58, 0x3c, 
        0xa0, 0x80, 0x00, 0x60, 0xa5, 0x02, 0x00, 0x78, 0xa5, 0x07, 0xc6, 0x64, 0xa5, 0x00, 0x06, 
        0x38, 0xe0, 0x00, 0xa2, 0x2c, 0x06, 0x00, 0x00, 0x41, 0x82, 0x00, 0x08, 0x60, 0xe7, 0x00, 
        0x40, 0x78, 0xe7, 0xc1, 0xc6, 0xf8, 0xe5, 0x10, 0x10, 0xe8, 0xa1, 0xff, 0x50, 0xe8, 0xc1, 
        0xff, 0x48, 0xe8, 0xe1, 0xff, 0x40, 0xe9, 0x01, 0xff, 0x38, 0x4e, 0x80, 0x00, 0x20, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    ])

    hwinit_postcount_block_size = len(hwinit_postcount_block_new)
    if hwinit_postcount_block_size > 256:
        raise RuntimeError("hwinit postcount block too big - must be 256 bytes or less")

    cbb_image[address:address+hwinit_postcount_block_size] = hwinit_postcount_block_new

    cbb_image, _ = assemble_branch(cbb_image, address+0x0C, hwinit_register_setup_fcn_address)
    cbb_image, _ = assemble_branch(cbb_image, address+0x10, hwinit_interpreter_top_address)
    cbb_image, _ = assemble_branch(cbb_image, address+0x14, hwinit_done_address)

    return cbb_image

def assemble_hwinit_postcount_block_5772_6752_9188(cbb_image: bytes, address: int):
    # legacy postcount code. avoids breaking older ECCs
    hwinit_postcount_block = bytes([
        0x48, 0x00, 0x00, 0x10, 0x48, 0x00, 0x00, 0x3c, 0x48, 0x00, 0x00, 0x48, 0x48, 0x00, 0x00, 0x64, 
        0x7c, 0xcc, 0x42, 0xa6, 0x74, 0xc6, 0x01, 0x00, 0xf8, 0xc1, 0xff, 0x58, 0x3c, 0xa0, 0x80, 
        0x00, 0x60, 0xa5, 0x02, 0x00, 0x78, 0xa5, 0x07, 0xc6, 0x64, 0xa5, 0x00, 0x06, 0x38, 0xe0, 
        0x00, 0xa2, 0x78, 0xe7, 0xc1, 0xc6, 0xf8, 0xe5, 0x10, 0x10, 0x48, 0x00, 0x0a, 0xa5, 0x48, 
        0x00, 0x06, 0xdc, 0x7c, 0x30, 0x20, 0x40, 0x40, 0x80, 0x0b, 0x00, 0x48, 0x00, 0x00, 0x4d, 
        0x48, 0x00, 0x06, 0xd4, 0x1c, 0xc6, 0x00, 0x32, 0x7d, 0x0c, 0x42, 0xa6, 0x7d, 0x08, 0x32, 
        0x14, 0x7c, 0xec, 0x42, 0xa6, 0x7c, 0x27, 0x40, 0x40, 0x41, 0x81, 0xff, 0xdc, 0x48, 0x00, 
        0x00, 0x2d, 0x4b, 0xff, 0xff, 0xf0, 0x3c, 0xa0, 0x80, 0x00, 0x60, 0xa5, 0x02, 0x00, 0x78, 
        0xa5, 0x07, 0xc6, 0x64, 0xa5, 0x00, 0x06, 0x38, 0xe0, 0x00, 0x2e, 0x78, 0xe7, 0xc1, 0xc6, 
        0xf8, 0xe5, 0x10, 0x10, 0x38, 0xa0, 0x00, 0x01, 0x48, 0x00, 0x0a, 0xc0, 0xf8, 0xa1, 0xff, 
        0x50, 0xf8, 0xc1, 0xff, 0x48, 0xf8, 0xe1, 0xff, 0x40, 0xf9, 0x01, 0xff, 0x38, 0xe8, 0xc1, 
        0xff, 0x58, 0x7c, 0xac, 0x42, 0xa6, 0x74, 0xa7, 0x01, 0x00, 0x7c, 0x26, 0x38, 0x40, 0x41, 
        0x82, 0x00, 0x30, 0xf8, 0xe1, 0xff, 0x58, 0x3c, 0xa0, 0x80, 0x00, 0x60, 0xa5, 0x02, 0x00, 
        0x78, 0xa5, 0x07, 0xc6, 0x64, 0xa5, 0x00, 0x06, 0x38, 0xe0, 0x00, 0xa2, 0x2c, 0x06, 0x00, 
        0x00, 0x41, 0x82, 0x00, 0x08, 0x60, 0xe7, 0x00, 0x40, 0x78, 0xe7, 0xc1, 0xc6, 0xf8, 0xe5, 
        0x10, 0x10, 0xe8, 0xa1, 0xff, 0x50, 0xe8, 0xc1, 0xff, 0x48, 0xe8, 0xe1, 0xff, 0x40, 0xe9, 
        0x01, 0xff, 0x38, 0x4e, 0x80, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    ])

    hwinit_postcount_block_size = len(hwinit_postcount_block)
    if hwinit_postcount_block_size > 256:
        raise RuntimeError("hwinit postcount block too big - must be 256 bytes or less")

    cbb_image[address:address+hwinit_postcount_block_size] = hwinit_postcount_block
    return cbb_image


def rgh13cbb_do_patches(cbb_image: bytes):

    # for 5772, 6752, 9188
    if cbb_image[0x994:0x998] == bytes([0x48, 0x00, 0x03, 0xC9]) and \
        cbb_image[0x9E8:0x9EC] == bytes([0x1C, 0xC6, 0x00, 0x32]) and \
        cbb_image[0xDC4:0xDC8] == bytes([0x38, 0xA0, 0x00, 0x01]):

        print("cbbpatch: found 5772/6752/9188")
        cbb_image = assemble_hwinit_postcount_block_5772_6752_9188(cbb_image, HWINIT_POSTCOUNT_BLOCK_BASE_ADDRESS)

        # 0x0994: go through our postcounter init function instead of calling 0x0D5C directly
        cbb_image, _ = assemble_branch(cbb_image, 0x0994, HWINIT_POSTCOUNT_BLOCK_BASE_ADDRESS + 0)

        # 0x09E8: reroute hwinit interpreter delay function through delayop stub.
        cbb_image, _ = assemble_branch(cbb_image, 0x09E8, HWINIT_POSTCOUNT_BLOCK_BASE_ADDRESS + 8)

        # 0x0DC4: reroute success case through done stub
        cbb_image, _ = assemble_branch(cbb_image, 0x0DC4, HWINIT_POSTCOUNT_BLOCK_BASE_ADDRESS + 12)
    
    # for 1940, which has the hwinit code later on
    elif cbb_image[0x3408:0x340C] == bytes([0x48, 0x00, 0x03, 0x85]) and \
       cbb_image[0x345C:0x3460] == bytes([0x1C, 0xC6, 0x00, 0x32]) and \
       cbb_image[0x37EC:0x37F0] == bytes([0x38, 0xA0, 0x00, 0x01]):
        print("cbbpatch: found 1940")
        
        cbb_image = assemble_hwinit_postcount_block_universal(cbb_image,
                                                              HWINIT_POSTCOUNT_BLOCK_BASE_ADDRESS,
                                                              0x378C,
                                                              0x340C,
                                                              0x37F8)

        cbb_image, _ = assemble_branch(cbb_image, 0x3408, HWINIT_POSTCOUNT_BLOCK_BASE_ADDRESS + 0) # init
        cbb_image, _ = assemble_branch(cbb_image, 0x345C, HWINIT_POSTCOUNT_BLOCK_BASE_ADDRESS + 4) # delay
        cbb_image, _ = assemble_branch(cbb_image, 0x37EC, HWINIT_POSTCOUNT_BLOCK_BASE_ADDRESS + 8) # success
    else:
        raise RuntimeError("unrecognized CB_B, cannot continue")


    return cbb_image
