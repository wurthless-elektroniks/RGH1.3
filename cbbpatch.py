'''
RGH1.3 CB_B patches

Identical between 5772 and 6752
'''

from patcher import *

HWINIT_POSTCOUNT_BLOCK_BASE_ADDRESS = 0x280


def assemble_hwinit_postcount_block(cbb_image: bytes, address: int):
    # assemble hwinit_postcount_unified.s, then take the hexdump and shove it in here.
    # total size of this stub cannot exceed 256 bytes!
    hwinit_postcount_block = bytes([
        0x48, 0x00, 0x00, 0x10, 0x48, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x7c, 0x48, 0x00, 0x00, 0xc4, 
        0x7c, 0xcc, 0x42, 0xa6, 0x74, 0xc6, 0x08, 0x00, 0x90, 0xc1, 0xff, 0x5c, 0x7c, 0xe8, 0x02, 
        0xa6, 0x48, 0x00, 0x00, 0xc9, 0x7c, 0xe8, 0x03, 0xa6, 0x38, 0xe0, 0x00, 0xae, 0x2c, 0x06, 
        0x00, 0x00, 0x41, 0x82, 0x00, 0x08, 0x60, 0xe7, 0x00, 0x40, 0x78, 0xe7, 0xc1, 0xc6, 0xf8, 
        0xe5, 0x10, 0x10, 0x48, 0x00, 0x0a, 0x9c, 0x7c, 0x30, 0x20, 0x40, 0x40, 0x80, 0x00, 0x88, 
        0x80, 0xc1, 0xff, 0x5c, 0x7c, 0xac, 0x42, 0xa6, 0x74, 0xa7, 0x08, 0x00, 0x7c, 0x06, 0x38, 
        0x00, 0x41, 0x82, 0x06, 0xc4, 0x90, 0xe1, 0xff, 0x5c, 0x48, 0x00, 0x00, 0x85, 0x38, 0xe0, 
        0x00, 0xae, 0x2c, 0x06, 0x00, 0x00, 0x41, 0x82, 0x00, 0x08, 0x60, 0xe7, 0x00, 0x40, 0x78, 
        0xe7, 0xc1, 0xc6, 0xf8, 0xe5, 0x10, 0x10, 0x48, 0x00, 0x06, 0xa0, 0x1c, 0xc6, 0x00, 0x32, 
        0x7d, 0x0c, 0x42, 0xa6, 0x7d, 0x08, 0x32, 0x14, 0x7c, 0xec, 0x42, 0xa6, 0x7c, 0x27, 0x40, 
        0x40, 0x41, 0x81, 0xff, 0xac, 0x80, 0xc1, 0xff, 0x5c, 0x74, 0xe7, 0x08, 0x00, 0x7c, 0x06, 
        0x38, 0x00, 0x41, 0x82, 0xff, 0xe8, 0x90, 0xe1, 0xff, 0x5c, 0x48, 0x00, 0x00, 0x39, 0x38, 
        0xe0, 0x00, 0xae, 0x2c, 0x06, 0x00, 0x00, 0x41, 0x82, 0x00, 0x08, 0x60, 0xe7, 0x00, 0x40, 
        0x78, 0xe7, 0xc1, 0xc6, 0xf8, 0xe5, 0x10, 0x10, 0x4b, 0xff, 0xff, 0xc4, 0x48, 0x00, 0x00, 
        0x19, 0x38, 0xe0, 0x00, 0x2e, 0x78, 0xe7, 0xc1, 0xc6, 0xf8, 0xe5, 0x10, 0x10, 0x38, 0xa0, 
        0x00, 0x01, 0x48, 0x00, 0x0a, 0x6c, 0x3c, 0xa0, 0x80, 0x00, 0x60, 0xa5, 0x02, 0x00, 0x78, 
        0xa5, 0x07, 0xc6, 0x64, 0xa5, 0x00, 0x06, 0x4e, 0x80, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
    ])

    hwinit_postcount_block_size = len(hwinit_postcount_block)
    if hwinit_postcount_block_size > 256:
        raise RuntimeError("hwinit postcount block too big - must be 256 bytes or less")

    cbb_image[address:address+hwinit_postcount_block_size] = hwinit_postcount_block
    return cbb_image


def rgh13cbb_do_patches(cbb_image: bytes):
    cbb_image = assemble_hwinit_postcount_block(cbb_image, HWINIT_POSTCOUNT_BLOCK_BASE_ADDRESS)

    # 0x0944: call our postcounter init function instead of going to 0x0D5C directly
    cbb_image, _ = assemble_branch_with_link(cbb_image, 0x0944, HWINIT_POSTCOUNT_BLOCK_BASE_ADDRESS + 0)

    # 0x0998: reroute start of hwinit interpreter loop through toggle stub
    cbb_image, _ = assemble_branch(cbb_image, 0x0998, HWINIT_POSTCOUNT_BLOCK_BASE_ADDRESS + 4)

    # 0x09E8: reroute hwinit interpreter delay function through delayop stub
    cbb_image, _ = assemble_branch(cbb_image, 0x09E8, HWINIT_POSTCOUNT_BLOCK_BASE_ADDRESS + 8)

    # 0x0DC4: reroute success case through done stub
    cbb_image, _ = assemble_branch(cbb_image, 0x0DC4, HWINIT_POSTCOUNT_BLOCK_BASE_ADDRESS + 12)

    return cbb_image
